#include<iostream>
#include<map>
#include<list>
using namespace std;

class Graph{
	int V;
	map<int,list<int>> adjList;
	
public:
	Graph(int v){
		V=v;
	}
	void addEdge(int u,int v,bool bidir=true){
		adjList[u].push_back(v);
		if(bidir){
			adjList[v].push_back(u);	
		}
	}
	bool isCyclicHelper(int node,map<int,bool> &visited,int parent){
		visited[node]=true;
		for(int neighbour:adjList[node]){
			if(!visited[neighbour]){
				bool cycleDetected = isCyclicHelper(neighbour,visited,node);
				if(cycleDetected){
					return true;
				}
			}
			else if(neighbour!=parent){
				return true;
			}
		}
	}
	
	bool isCyclicDFS(){
		map<int,bool> visited;
		
		for(auto i :adjList){
			int node = i.first;
			if(!visited[node]){
				bool ans = isCyclicHelper(node,visited,node);
				if(ans==true){
					return true;
				}
			}
		}
		return false;
	}
};

int main(){
	
	Graph g(5);
	g.addEdge(0,1);
	g.addEdge(2,3);
	g.addEdge(3,4);
	g.addEdge(4,2);	
	if(g.isCyclicDFS()){
		cout<<" cyclic";
	}
	else{
		cout<<"not cyclic";
	}
}
